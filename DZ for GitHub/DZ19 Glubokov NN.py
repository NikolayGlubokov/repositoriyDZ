liner = '---------------'
print(liner * 7)
print('Задание №1 - Выведение текста строки, заключенного в скобках') #данная задача очень похожа на ту, что мне
# #удалось решить на занятии. Проблем с ней не возникло

c = 'Дана ст(рока символов, среди которых есть одна открыв)ающая'


def func1(x):
    x = x[x.find('(') + 1:x.find(')')]
    print(x)


func1(c)

print(liner * 7)
print('Задание №2 - нахождение и замена подстрок в строке')# Данная задача была проблемнее, но мне удалось её решить.
#Мне удалось обойтись без метода find, так как я заметил, что и find и index выдают индекс первого вхождения.

g = input('Введите какой-либо текст в строку!: ')
h = input('введите подстроку, которую желаете заменить: ')
d = input('Введите подстроку, которую хотите вставить взамен убранной: ')


def func2(x, y, z):
    b = ''
    while len(x) != 0:
        if y in x or y.capitalize() in x:
            b = b + x[:x.index(y)] + z
            x = x[x.index(y) + len(y):]
        else:
            b += x
            x = ''
    print(b)


func2(g, h, d)

print(liner * 7)
print('Задание №3 - нахождение количества слов в строке, начинающихся с буквы "е"')#Данная задача оказалась самой сложной для меня.
#Всё дело в том, что при записи с тройными скобками у меня не работал простой алгоритм и не считало число слов с нужной начальной буквой. Поэтому мне пришлось исследовать,
# в чем причина, что привело к большому коду. Мне пришлось удалить символ переноса на новую строку, затем перевести всё в список, а затем из списка удалить пустые строчные элементы.
# После этого я смог посчитать количество слов. Данный метод у меня предназначен для работы не только с тройными скобками.
#В более простом способе мной было выделено, что нужные слова начинаются либо с большой буквы, либо с сочетания пробела и нужной буквы.

c = '''Ежевику для ежат 
Принесли два ежа. 
Ежевику еле-еле 
Ежата возле ели съели'''


# def func(e):
#     print(e)
#     r = e.count(' е') + e.count('Е')
#     print(r)
#
#
# func(c)

def e_func(a):
    x = 'е'
    y = 'Е'
    d = []
    while True:
        if a.find(str('\n')) != -1:
            a = a[:a.find(str('\n'))] + ' ' + a[a.find(str('\n')) + 1:]
        else:
            break
    while True:
        if a.find(' ') != -1:
            d.append(a[:a.find(' ')])
            a = a[a.find(' ') + 1:]
        else:
            d.append(a)
            break
    print(d)
    d1 = []
    for i in d:
        if i != '':
            d1.append(i)
    print(d1)
    c = 0
    for i in range(len(d1)):
        if (d1[i][0] == x or d1[i][0] == y) and len(d1[i]) >= 2:
            c += 1

    print('Количество слов, начинающихся с буквы "е":',c)


e_func(c)
